# .github/workflows/sync-evm-changelog.yml
name: Sync EVM Changelog to Docs

on:
  repository_dispatch:
    types: [evm-release]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'EVM release tag to sync'
        required: true
        type: string
      product:
        description: 'Product name (evm, sdk, ibc, etc.)'
        required: false
        default: 'evm'
        type: string

jobs:
  sync-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout docs repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Determine product and release info
        id: release-info
        run: |
          # Get the release tag and product
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            RELEASE_TAG="${{ github.event.client_payload.tag_name }}"
            PRODUCT="evm"  # Default for repository_dispatch from cosmos/evm
          else
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
            PRODUCT="${{ github.event.inputs.product }}"
          fi

          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "product=$PRODUCT" >> $GITHUB_OUTPUT

          # Extract version pattern (e.g., v0.5.0 -> v0.5, v0.4.1 -> v0.4)
          VERSION_PATTERN=$(echo "$RELEASE_TAG" | grep -oE '^v[0-9]+\.[0-9]+')
          echo "version_pattern=$VERSION_PATTERN" >> $GITHUB_OUTPUT

          # Determine target directory based on versions.json
          # Read versions from versions.json for this product
          if command -v jq &> /dev/null; then
            VERSIONS=$(jq -r ".products.${PRODUCT}.versions[]" versions.json 2>/dev/null || echo "")

            # Find matching version directory
            TARGET_DIR=""
            for version in $VERSIONS; do
              if [[ "$version" == "next" ]]; then
                continue
              fi
              # Check if version directory matches this release
              if echo "$version" | grep -q "$VERSION_PATTERN"; then
                TARGET_DIR="$version"
                break
              fi
            done

            if [[ -z "$TARGET_DIR" ]]; then
              echo "No matching version directory found for $RELEASE_TAG"
              TARGET_DIR="next"  # Fallback to next
            fi

            echo "target_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
          else
            echo "jq not available, using next as target"
            echo "target_dir=next" >> $GITHUB_OUTPUT
          fi

          echo "Release: $RELEASE_TAG"
          echo "Product: $PRODUCT"
          echo "Version Pattern: $VERSION_PATTERN"
          echo "Target Directory: $TARGET_DIR"

      - name: Generate changelog for 'next'
        run: |
          node scripts/versioning/manage-changelogs.js \
            --product ${{ steps.release-info.outputs.product }} \
            --target next

      - name: Generate changelog for version-specific directory
        if: steps.release-info.outputs.target_dir != 'next'
        run: |
          node scripts/versioning/manage-changelogs.js \
            --product ${{ steps.release-info.outputs.product }} \
            --target ${{ steps.release-info.outputs.target_dir }} \
            --filter ${{ steps.release-info.outputs.version_pattern }}

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add "${{ steps.release-info.outputs.product }}/*/changelog/release-notes.mdx"

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: update ${{ steps.release-info.outputs.product }} changelog for ${{ steps.release-info.outputs.release_tag }}"
            git push
          fi